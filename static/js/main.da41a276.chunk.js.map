{"version":3,"sources":["CardItem.js","CardsContainer.js","App.js","serviceWorker.js","index.js"],"names":["CardItem","state","selected","hoverOff","hovered","handleClick","setState","prevState","handleMouseEnter","handleMouseLeave","this","props","topTitle","mTitle","taste","options","weight","description","available","opts","map","opt","index","digit","regex","test","match","replace","key","optStr","className","onClick","onMouseEnter","onMouseLeave","Component","OptionItem","CardDescription","cardItems","id","CardsContainer","items","item","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da41a276.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CardItem.scss';\n\nexport default class CardItem extends Component {\n  state = { selected: false, hoverOff: false, hovered: false };\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      selected: !prevState.selected,\n      hovered: false,\n      hoverOff: true\n    }));\n  };\n\n  handleMouseEnter = () => {\n    if (!this.state.hoverOff) this.setState({ hovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ hovered: false, hoverOff: false });\n  };\n\n  render() {\n    const {\n      topTitle,\n      mTitle,\n      taste,\n      options,\n      weight,\n      description,\n      available\n    } = this.props;\n    const { selected, hovered } = this.state;\n\n    const opts = options.map((opt, index) => {\n      let digit;\n      const regex = /\\d+/;\n      if (regex.test(opt)) {\n        digit = opt.match(regex);\n        opt = opt.replace(regex, '');\n      }\n      return <OptionItem key={index} optStr={opt} digit={digit} />;\n    });\n\n    return (\n      <div\n        className={\n          selected\n            ? 'CardItem selected'\n            : !available\n            ? 'CardItem disabled'\n            : 'CardItem'\n        }\n      >\n        <div\n          className={hovered ? 'Card hovered' : 'Card'}\n          onClick={this.handleClick}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n        >\n          <div className=\"CardHeader\">\n            <h3 className=\"CardHeader--title\">\n              {selected && hovered ? 'Котэ не одобряет?' : topTitle}\n            </h3>\n          </div>\n          <div className=\"CardInner\">\n            <h1 className=\"CardInner--title\">{mTitle}</h1>\n            <h2 className=\"CardInner--subtitle\">{taste}</h2>\n            <ul className=\"CardInner--options\">{opts}</ul>\n            <div className=\"CardInner--weight\">\n              <div className=\"CardInner--weight-val\">{weight}</div>\n              <div className=\"CardInner--weight-metrics\">кг</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"CardDescription\">\n          <CardDescription\n            selected={selected}\n            available={available}\n            description={description}\n            taste={taste}\n            handleClick={this.handleClick}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst OptionItem = ({ optStr, digit }) =>\n  digit ? (\n    <p>\n      <strong>{digit[0]}</strong>\n      {optStr}\n    </p>\n  ) : (\n    <p>{optStr}</p>\n  );\n\nconst CardDescription = ({\n  selected,\n  available,\n  taste,\n  description,\n  handleClick\n}) =>\n  available ? (\n    selected ? (\n      <p>{description}</p>\n    ) : (\n      <p>\n        Чего сидишь? Порадуй котэ, <span onClick={handleClick}>купи</span>.\n      </p>\n    )\n  ) : (\n    <p>Печалька, {taste} закончился.</p>\n  );\n\nCardItem.propTypes = {\n  topTitle: PropTypes.string,\n  mTitle: PropTypes.string,\n  taste: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.string),\n  weight: PropTypes.number,\n  description: PropTypes.string,\n  available: PropTypes.bool\n};\n\nOptionItem.propTypes = {\n  optStr: PropTypes.string,\n  digit: PropTypes.number\n};\n\nCardDescription.propTypes = {\n  selected: PropTypes.bool,\n  available: PropTypes.bool,\n  handleClick: PropTypes.func\n};\n","import React from 'react';\nimport './CardsContainer.css';\nimport CardItem from './CardItem';\n\nconst cardItems = [\n  {\n    id: 1,\n    topTitle: 'Сказочное заморское явство',\n    mTitle: 'Нямушка',\n    taste: 'с фуа-гра',\n    options: ['10 порций', 'мышь в подарок'],\n    weight: '0,5',\n    description: 'Печень утки разварная с артишоками.',\n    available: true\n  },\n  {\n    id: 2,\n    topTitle: 'Сказочное заморское явство',\n    mTitle: 'Нямушка',\n    taste: 'с рыбой',\n    options: ['40 порций', '2 мыши в подарок'],\n    weight: '2',\n    description: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\n    available: true\n  },\n  {\n    id: 3,\n    topTitle: 'Сказочное заморское явство',\n    mTitle: 'Нямушка',\n    taste: 'с курой',\n    options: ['100 порций', '5 мышей в подарок', 'заказчик доволен'],\n    weight: '5',\n    description: 'Филе из цыплят с трюфелями в бульоне.',\n    available: false\n  }\n];\n\nconst CardsContainer = () => {\n  const items = cardItems.map(item => <CardItem key={item.id} {...item} />);\n  return <div className=\"CardsContainer\">{items}</div>;\n};\n\nexport default CardsContainer;\n","import React, { Component } from 'react';\nimport '../node_modules/modern-normalize/modern-normalize.css';\nimport './App.css';\nimport CardsContainer from './CardsContainer';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"AppContainer\">\n          <h1 className=\"AppTitle\">Ты сегодня покормил кота?</h1>\n          <CardsContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}